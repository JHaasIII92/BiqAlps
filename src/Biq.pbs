#!/bin/bash
#=============  PBS directives  ==============##
#-- PBS Directives, to be customized by a user
#   more at https://latisresearch.umn.edu/creating-a-PBS-script
#
#The name this job 
#PBS -N MC-500-1-128-8
#PBS -j oe

#select compute
#
#
#PBS -l select=1:ncpus=128:mpiprocs=128:mem=512gb
#
#
# Use the calculated time in the directive below
#
#
#PBS -l walltime=04:20:00
#
#
# When to send a status email ("-m abe" sends e-mails at job abort, begin, and end)
#PBS -m ae 
#
#
# Custom user's email; edit and uncomment 
# (remove the leading "#--" to activate)
#--#PBS -M account@niu.edu
#
#===================================================================#
#==== Script Command  Section (executed on a remote node)===========#
# Use the "normal" bash script syntacsis (google for "bash tutorials")
# for example, https://linuxhint.com/30_bash_script_examples 
#===================================================================#
# Change to the directory where the 'qsub' command was executed.
# The $PBS_O_WORKDIR is always pointing to the job submission directory
echo "The job working directory \$PBS_O_WORKDIR is $PBS_O_WORKDIR"
cd $PBS_O_WORKDIR       
#
#Print out PBS environment variables
echo "#============="
echo "PBS Environment variables, can be used in the job submission scripts as \$PBS_VARNAME"
env | grep PBS
echo "#============="
echo "For example,we can find the number NPmpi of allocated MPI processes as"
echo "NPmpi=\"\$(cat \$PBS_NODEFILE | wc -l)\"" 
NPmpi="$(cat $PBS_NODEFILE | wc -l)" 
echo "NPmpi=$NPmpi"
#
# Print out when and wher this job starts
echo '****************************************************'
echo "Job starting at: `date` at compute node `hostname`"
echo '****************************************************'
# Uncomment 'set -x' to enable a mode of the shell 
# where all executed commands are printed to the output file.
# (may help to visualize the control flow of the script if it is not functioning as expected)
#set -x 
#
echo "Loading required environment modules"
module purge; module load openmpi
# List the loaded modules
module list
# Run the program 'cudaMPI', expected to be present in the submission folder
# ('./' is the path to the current directory)
echo "Running the ./Biq program using $NPmpi mpi processes: mpirun ./Biq -param Biq.par"
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-1.sparse.bc -param Biq.par 
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-2.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-3.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-16.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-5.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-6.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-7.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-8.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-9.sparse.bc -param Biq.par
#mpirun -np 4 ./Biq -Alps_instance /lstr/sahara/biqcrunch/TestData/MaxCut/bc/bqp50-10.sparse.bc -param Biq.par
mpirun -np 128 ./Biq -param Biq.par
set +x
echo '****************************************************'
echo "Job completed at: `date`"
echo '****************************************************'
